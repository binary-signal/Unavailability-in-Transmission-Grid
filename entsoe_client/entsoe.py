import datetime
import json
import logging
import time
import pprint
import os
from timeit import default_timer as timer
import random

import pandas as pd
import pytz
import requests
from bs4 import BeautifulSoup
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

from .exceptions import *
from .user_agents import user_agents


class EntsoeAPI(object):
    """
    API consumer for Entsoe
    """

    __base_url = (
        "https://transparency.entsoe.eu/outage-domain/r2/"
        "unavailabilityInTransmissionGrid/"
    )
    __endpoints = {
        "getDataTableData/": "POST",
        "detail": "GET",
        "getDetailCurve/": "POST",
    }

    __post_headers = {
        "Origin": "https://transparency.entsoe.eu",
        "Content-Type": "application/json;charset=UTF-8",
        "X-Requested-With": "XMLHttpRequest",
        "Connection": "keep-alive",
    }

    __get_headers = {
        "Origin": "https://transparency.entsoe.eu",
        "Connection": "keep-alive",
    }

    __asset_type = {
        "AC Link": "B21",
        "DC Link": "B22",
        "Substation": "B23",
        "Transformer": "B24",
        "Not specified": "UNKNOWN",
    }

    __outage_type = {"Forced": "A54", "Planned": "A53"}

    __outage_status = {"Active": "A05", "Cancelled": "A09", "Withdrawn": "A13"}

    __countries = [
        "AL",
        "AT",
        "BY",
        "BE",
        "BA",
        "BG",
        "HR",
        "CZ",
        "DK",
        "EE",
        "MK",
        "FI",
        "FR",
        "DE",
        "GR",
        "HU",
        "IE",
        "IT",
        "LV",
        "LT",
        "LU",
        "MT",
        "MD",
        "ME",
        "NL",
        "NO",
        "PL",
        "PT",
        "RO",
        "RU",
        "RS",
        "SK",
        "SI",
        "ES",
        "SE",
        "CH",
        "TR",
        "UA",
        "UK",
    ]

    __cta_borders = {
        "AL": [
            "CTY|10YAL-KESH-----5!CTA_CTA|10YAL-KESH-----5_CTA_CTA|10YGR-HTSO-----Y",
            "CTY|10YAL-KESH-----5!CTA_CTA|10YAL-KESH-----5_CTA_CTA|10YCS-CG-TSO---S",
            "CTY|10YAL-KESH-----5!CTA_CTA|10YAL-KESH-----5_CTA_CTA|10YCS-SERBIATSOV",
        ],
        "AT": [
            "CTY|10YAT-APG------L!CTA_CTA|10YAT-APG------L_CTA_CTA|10YCH-SWISSGRIDZ",
            "CTY|10YAT-APG------L!CTA_CTA|10YAT-APG------L_CTA_CTA|10YCZ-CEPS-----N",
            "CTY|10YAT-APG------L!CTA_CTA|10YAT-APG------L_CTA_CTA|10YDE-RWENET---I",
            "CTY|10YAT-APG------L!CTA_CTA|10YAT-APG------L_CTA_CTA|10YDE-EON------1",
            "CTY|10YAT-APG------L!CTA_CTA|10YAT-APG------L_CTA_CTA|10YDE-ENBW-----N",
            "CTY|10YAT-APG------L!CTA_CTA|10YAT-APG------L_CTA_CTA|10YHU-MAVIR----U",
            "CTY|10YAT-APG------L!CTA_CTA|10YAT-APG------L_CTA_CTA|10YIT-GRTN-----B",
            "CTY|10YAT-APG------L!CTA_CTA|10YAT-APG------L_CTA_CTA|10YSI-ELES-----O",
        ],
        "BA": [
            "CTY|10YBA-JPCC-----D!CTA_CTA|10YBA-JPCC-----D_CTA_CTA|10YHR-HEP------M",
            "CTY|10YBA-JPCC-----D!CTA_CTA|10YBA-JPCC-----D_CTA_CTA|10YCS-CG-TSO---S",
            "CTY|10YBA-JPCC-----D!CTA_CTA|10YBA-JPCC-----D_CTA_CTA|10YCS-SERBIATSOV",
        ],
        "BE": [
            "CTY|10YBE----------2!CTA_CTA|10YBE----------2_CTA_CTA|10YFR-RTE------C",
            "CTY|10YBE----------2!CTA_CTA|10YBE----------2_CTA_CTA|10YGB----------A",
            "CTY|10YBE----------2!CTA_CTA|10YBE----------2_CTA_CTA|10YLU-CEGEDEL-NQ",
            "CTY|10YBE----------2!CTA_CTA|10YBE----------2_CTA_CTA|10YNL----------L",
        ],
        "BG": [
            "CTY|10YCA-BULGARIA-R!CTA_CTA|10YCA-BULGARIA-R_CTA_CTA|10YGR-HTSO-----Y",
            "CTY|10YCA-BULGARIA-R!CTA_CTA|10YCA-BULGARIA-R_CTA_CTA|10YMK-MEPSO----8",
            "CTY|10YCA-BULGARIA-R!CTA_CTA|10YCA-BULGARIA-R_CTA_CTA|10YRO-TEL------P",
            "CTY|10YCA-BULGARIA-R!CTA_CTA|10YCA-BULGARIA-R_CTA_CTA|10YCS-SERBIATSOV",
            "CTY|10YCA-BULGARIA-R!CTA_CTA|10YCA-BULGARIA-R_CTA_CTA|10YTR-TEIAS----W",
        ],
        "BY": [
            "CTY|BY!CTA_CTA|10Y1001A1001A51S_CTA_CTA|10YLT-1001A0008Q",
            "CTY|BY!CTA_CTA|10Y1001A1001A51S_CTA_CTA|10Y1001C--000182",
        ],
        "CH": [
            "CTY|10YCH-SWISSGRIDZ!CTA_CTA|10YCH-SWISSGRIDZ_CTA_CTA|10YAT-APG------L",
            "CTY|10YCH-SWISSGRIDZ!CTA_CTA|10YCH-SWISSGRIDZ_CTA_CTA|10YDE-RWENET---I",
            "CTY|10YCH-SWISSGRIDZ!CTA_CTA|10YCH-SWISSGRIDZ_CTA_CTA|10YDE-ENBW-----N",
            "CTY|10YCH-SWISSGRIDZ!CTA_CTA|10YCH-SWISSGRIDZ_CTA_CTA|10YFR-RTE------C",
            "CTY|10YCH-SWISSGRIDZ!CTA_CTA|10YCH-SWISSGRIDZ_CTA_CTA|10YIT-GRTN-----B",
        ],
        "CZ": [
            "CTY|10YCZ-CEPS-----N!CTA_CTA|10YCZ-CEPS-----N_CTA_CTA|10YAT-APG------L",
            "CTY|10YCZ-CEPS-----N!CTA_CTA|10YCZ-CEPS-----N_CTA_CTA|10YDE-VE-------2",
            "CTY|10YCZ-CEPS-----N!CTA_CTA|10YCZ-CEPS-----N_CTA_CTA|10YDE-EON------1",
            "CTY|10YCZ-CEPS-----N!CTA_CTA|10YCZ-CEPS-----N_CTA_CTA|10YPL-AREA-----S",
            "CTY|10YCZ-CEPS-----N!CTA_CTA|10YCZ-CEPS-----N_CTA_CTA|10YSK-SEPS-----K",
            "CTY|10YCZ-CEPS-----N!CTA_CTA|10YDOM-1001A082L_CTA_CTA|10YDE-VE-------2",
        ],
        "DE": [
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-VE-------2_CTA_CTA|10YCZ-CEPS-----N",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-VE-------2_CTA_CTA|10Y1001A1001A796",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-VE-------2_CTA_CTA|10YPL-AREA-----S",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-VE-------2_CTA_CTA|10YDOM-1001A082L",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-RWENET---I_CTA_CTA|10YAT-APG------L",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-RWENET---I_CTA_CTA|10YCH-SWISSGRIDZ",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-RWENET---I_CTA_CTA|10YFR-RTE------C",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-RWENET---I_CTA_CTA|10YLU-CEGEDEL-NQ",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-RWENET---I_CTA_CTA|10YNL----------L",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-EON------1_CTA_CTA|10YAT-APG------L",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-EON------1_CTA_CTA|10YCZ-CEPS-----N",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-EON------1_CTA_CTA|10Y1001A1001A796",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-EON------1_CTA_CTA|10YNL----------L",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-EON------1_CTA_CTA|10YSE-1--------K",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-ENBW-----N_CTA_CTA|10YAT-APG------L",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-ENBW-----N_CTA_CTA|10YCH-SWISSGRIDZ",
            "CTY|10Y1001A1001A83F!CTA_CTA|10YDE-ENBW-----N_CTA_CTA|10YFR-RTE------C",
        ],
        "DK": [
            "CTY|10Y1001A1001A65H!CTA_CTA|10Y1001A1001A796_CTA_CTA|10YDE-VE-------2",
            "CTY|10Y1001A1001A65H!CTA_CTA|10Y1001A1001A796_CTA_CTA|10YDE-EON------1",
            "CTY|10Y1001A1001A65H!CTA_CTA|10Y1001A1001A796_CTA_CTA|10YNO-0--------C",
            "CTY|10Y1001A1001A65H!CTA_CTA|10Y1001A1001A796_CTA_CTA|10YSE-1--------K",
        ],
        "EE": [
            "CTY|10Y1001A1001A39I!CTA_CTA|10Y1001A1001A39I_CTA_CTA|10YFI-1--------U",
            "CTY|10Y1001A1001A39I!CTA_CTA|10Y1001A1001A39I_CTA_CTA|10YLV-1001A00074",
            "CTY|10Y1001A1001A39I!CTA_CTA|10Y1001A1001A39I_CTA_CTA|10Y1001A1001A49F",
        ],
        "ES": [
            "CTY|10YES-REE------0!CTA_CTA|10YES-REE------0_CTA_CTA|10YFR-RTE------C",
            "CTY|10YES-REE------0!CTA_CTA|10YES-REE------0_CTA_CTA|10YPT-REN------W",
        ],
        "FI": [
            "CTY|10YFI-1--------U!CTA_CTA|10YFI-1--------U_CTA_CTA|10Y1001A1001A39I",
            "CTY|10YFI-1--------U!CTA_CTA|10YFI-1--------U_CTA_CTA|10YNO-0--------C",
            "CTY|10YFI-1--------U!CTA_CTA|10YFI-1--------U_CTA_CTA|10Y1001A1001A49F",
            "CTY|10YFI-1--------U!CTA_CTA|10YFI-1--------U_CTA_CTA|10YSE-1--------K",
        ],
        "FR": [
            "CTY|10YFR-RTE------C!CTA_CTA|10YFR-RTE------C_CTA_CTA|10YBE----------2",
            "CTY|10YFR-RTE------C!CTA_CTA|10YFR-RTE------C_CTA_CTA|10YCH-SWISSGRIDZ",
            "CTY|10YFR-RTE------C!CTA_CTA|10YFR-RTE------C_CTA_CTA|10YDE-RWENET---I",
            "CTY|10YFR-RTE------C!CTA_CTA|10YFR-RTE------C_CTA_CTA|10YDE-ENBW-----N",
            "CTY|10YFR-RTE------C!CTA_CTA|10YFR-RTE------C_CTA_CTA|10YES-REE------0",
            "CTY|10YFR-RTE------C!CTA_CTA|10YFR-RTE------C_CTA_CTA|10YIT-GRTN-----B",
            "CTY|10YFR-RTE------C!CTA_CTA|10YFR-RTE------C_CTA_CTA|10YGB----------A",
        ],
        "GR": [
            "CTY|10YGR-HTSO-----Y!CTA_CTA|10YGR-HTSO-----Y_CTA_CTA|10YAL-KESH-----5",
            "CTY|10YGR-HTSO-----Y!CTA_CTA|10YGR-HTSO-----Y_CTA_CTA|10YCA-BULGARIA-R",
            "CTY|10YGR-HTSO-----Y!CTA_CTA|10YGR-HTSO-----Y_CTA_CTA|10YIT-GRTN-----B",
            "CTY|10YGR-HTSO-----Y!CTA_CTA|10YGR-HTSO-----Y_CTA_CTA|10YMK-MEPSO----8",
            "CTY|10YGR-HTSO-----Y!CTA_CTA|10YGR-HTSO-----Y_CTA_CTA|10YTR-TEIAS----W",
        ],
        "HR": [
            "CTY|10YHR-HEP------M!CTA_CTA|10YHR-HEP------M_CTA_CTA|10YBA-JPCC-----D",
            "CTY|10YHR-HEP------M!CTA_CTA|10YHR-HEP------M_CTA_CTA|10YHU-MAVIR----U",
            "CTY|10YHR-HEP------M!CTA_CTA|10YHR-HEP------M_CTA_CTA|10YCS-SERBIATSOV",
            "CTY|10YHR-HEP------M!CTA_CTA|10YHR-HEP------M_CTA_CTA|10YSI-ELES-----O",
        ],
        "HU": [
            "CTY|10YHU-MAVIR----U!CTA_CTA|10YHU-MAVIR----U_CTA_CTA|10YAT-APG------L",
            "CTY|10YHU-MAVIR----U!CTA_CTA|10YHU-MAVIR----U_CTA_CTA|10YHR-HEP------M",
            "CTY|10YHU-MAVIR----U!CTA_CTA|10YHU-MAVIR----U_CTA_CTA|10YRO-TEL------P",
            "CTY|10YHU-MAVIR----U!CTA_CTA|10YHU-MAVIR----U_CTA_CTA|10YCS-SERBIATSOV",
            "CTY|10YHU-MAVIR----U!CTA_CTA|10YHU-MAVIR----U_CTA_CTA|10YSK-SEPS-----K",
            "CTY|10YHU-MAVIR----U!CTA_CTA|10YHU-MAVIR----U_CTA_CTA|10YUA-WEPS-----0",
        ],
        "IE": [
            "CTY|10YIE-1001A00010!CTA_CTA|10YIE-1001A00010_CTA_CTA|10Y1001A1001A016",
            "CTY|10YIE-1001A00010!CTA_CTA|10YIE-1001A00010_CTA_CTA|10YGB----------A",
        ],
        "IT": [
            "CTY|10YIT-GRTN-----B!CTA_CTA|10YIT-GRTN-----B_CTA_CTA|10YAT-APG------L",
            "CTY|10YIT-GRTN-----B!CTA_CTA|10YIT-GRTN-----B_CTA_CTA|10YCH-SWISSGRIDZ",
            "CTY|10YIT-GRTN-----B!CTA_CTA|10YIT-GRTN-----B_CTA_CTA|10YFR-RTE------C",
            "CTY|10YIT-GRTN-----B!CTA_CTA|10YIT-GRTN-----B_CTA_CTA|10YGR-HTSO-----Y",
            "CTY|10YIT-GRTN-----B!CTA_CTA|10YIT-GRTN-----B_CTA_CTA|10Y1001A1001A93C",
            "CTY|10YIT-GRTN-----B!CTA_CTA|10YIT-GRTN-----B_CTA_CTA|10YSI-ELES-----O",
        ],
        "LT": [
            "CTY|10YLT-1001A0008Q!CTA_CTA|10YLT-1001A0008Q_CTA_CTA|10Y1001A1001A51S",
            "CTY|10YLT-1001A0008Q!CTA_CTA|10YLT-1001A0008Q_CTA_CTA|10YLV-1001A00074",
            "CTY|10YLT-1001A0008Q!CTA_CTA|10YLT-1001A0008Q_CTA_CTA|10YPL-AREA-----S",
            "CTY|10YLT-1001A0008Q!CTA_CTA|10YLT-1001A0008Q_CTA_CTA|10Y1001A1001A50U",
            "CTY|10YLT-1001A0008Q!CTA_CTA|10YLT-1001A0008Q_CTA_CTA|10YSE-1--------K",
        ],
        "LU": [
            "CTY|10YLU-CEGEDEL-NQ!CTA_CTA|10YLU-CEGEDEL-NQ_CTA_CTA|10YBE----------2",
            "CTY|10YLU-CEGEDEL-NQ!CTA_CTA|10YLU-CEGEDEL-NQ_CTA_CTA|10YDE-RWENET---I",
        ],
        "LV": [
            "CTY|10YLV-1001A00074!CTA_CTA|10YLV-1001A00074_CTA_CTA|10Y1001A1001A39I",
            "CTY|10YLV-1001A00074!CTA_CTA|10YLV-1001A00074_CTA_CTA|10YLT-1001A0008Q",
            "CTY|10YLV-1001A00074!CTA_CTA|10YLV-1001A00074_CTA_CTA|10Y1001A1001A49F",
        ],
        "MD": [
            "CTY|10Y1001A1001A990!CTA_CTA|10Y1001A1001A990_CTA_CTA|10YRO-TEL------P",
            "CTY|10Y1001A1001A990!CTA_CTA|10Y1001A1001A990_CTA_CTA|10Y1001C--000182",
        ],
        "ME": [
            "CTY|10YCS-CG-TSO---S!CTA_CTA|10YCS-CG-TSO---S_CTA_CTA|10YAL-KESH-----5",
            "CTY|10YCS-CG-TSO---S!CTA_CTA|10YCS-CG-TSO---S_CTA_CTA|10YBA-JPCC-----D",
            "CTY|10YCS-CG-TSO---S!CTA_CTA|10YCS-CG-TSO---S_CTA_CTA|10YCS-SERBIATSOV",
        ],
        "MK": [
            "CTY|10YMK-MEPSO----8!CTA_CTA|10YMK-MEPSO----8_CTA_CTA|10YCA-BULGARIA-R",
            "CTY|10YMK-MEPSO----8!CTA_CTA|10YMK-MEPSO----8_CTA_CTA|10YGR-HTSO-----Y",
            "CTY|10YMK-MEPSO----8!CTA_CTA|10YMK-MEPSO----8_CTA_CTA|10YCS-SERBIATSOV",
        ],
        "MT": [
            "CTY|10Y1001A1001A93C!CTA_CTA|10Y1001A1001A93C_CTA_CTA|10YIT-GRTN-----B"
        ],
        "NL": [
            "CTY|10YNL----------L!CTA_CTA|10YNL----------L_CTA_CTA|10YBE----------2",
            "CTY|10YNL----------L!CTA_CTA|10YNL----------L_CTA_CTA|10YDE-RWENET---I",
            "CTY|10YNL----------L!CTA_CTA|10YNL----------L_CTA_CTA|10YDE-EON------1",
            "CTY|10YNL----------L!CTA_CTA|10YNL----------L_CTA_CTA|10YNO-0--------C",
            "CTY|10YNL----------L!CTA_CTA|10YNL----------L_CTA_CTA|10YGB----------A",
        ],
        "NO": [
            "CTY|10YNO-0--------C!CTA_CTA|10YNO-0--------C_CTA_CTA|10Y1001A1001A796",
            "CTY|10YNO-0--------C!CTA_CTA|10YNO-0--------C_CTA_CTA|10YFI-1--------U",
            "CTY|10YNO-0--------C!CTA_CTA|10YNO-0--------C_CTA_CTA|10YNL----------L",
            "CTY|10YNO-0--------C!CTA_CTA|10YNO-0--------C_CTA_CTA|10YSE-1--------K",
        ],
        "PL": [
            "CTY|10YPL-AREA-----S!CTA_CTA|10YPL-AREA-----S_CTA_CTA|10YCZ-CEPS-----N",
            "CTY|10YPL-AREA-----S!CTA_CTA|10YPL-AREA-----S_CTA_CTA|10YDE-VE-------2",
            "CTY|10YPL-AREA-----S!CTA_CTA|10YPL-AREA-----S_CTA_CTA|10YLT-1001A0008Q",
            "CTY|10YPL-AREA-----S!CTA_CTA|10YPL-AREA-----S_CTA_CTA|10YSE-1--------K",
            "CTY|10YPL-AREA-----S!CTA_CTA|10YPL-AREA-----S_CTA_CTA|10YSK-SEPS-----K",
            "CTY|10YPL-AREA-----S!CTA_CTA|10YPL-AREA-----S_CTA_CTA|10Y1001A1001A869",
        ],
        "PT": [
            "CTY|10YPT-REN------W!CTA_CTA|10YPT-REN------W_CTA_CTA|10YES-REE------0"
        ],
        "RO": [
            "CTY|10YRO-TEL------P!CTA_CTA|10YRO-TEL------P_CTA_CTA|10YCA-BULGARIA-R",
            "CTY|10YRO-TEL------P!CTA_CTA|10YRO-TEL------P_CTA_CTA|10YHU-MAVIR----U",
            "CTY|10YRO-TEL------P!CTA_CTA|10YRO-TEL------P_CTA_CTA|10Y1001A1001A990",
            "CTY|10YRO-TEL------P!CTA_CTA|10YRO-TEL------P_CTA_CTA|10YCS-SERBIATSOV",
            "CTY|10YRO-TEL------P!CTA_CTA|10YRO-TEL------P_CTA_CTA|10YUA-WEPS-----0",
        ],
        "RS": [
            "CTY|10YCS-SERBIATSOV!CTA_CTA|10YCS-SERBIATSOV_CTA_CTA|10YAL-KESH-----5",
            "CTY|10YCS-SERBIATSOV!CTA_CTA|10YCS-SERBIATSOV_CTA_CTA|10YBA-JPCC-----D",
            "CTY|10YCS-SERBIATSOV!CTA_CTA|10YCS-SERBIATSOV_CTA_CTA|10YCA-BULGARIA-R",
            "CTY|10YCS-SERBIATSOV!CTA_CTA|10YCS-SERBIATSOV_CTA_CTA|10YHR-HEP------M",
            "CTY|10YCS-SERBIATSOV!CTA_CTA|10YCS-SERBIATSOV_CTA_CTA|10YHU-MAVIR----U",
            "CTY|10YCS-SERBIATSOV!CTA_CTA|10YCS-SERBIATSOV_CTA_CTA|10YCS-CG-TSO---S",
            "CTY|10YCS-SERBIATSOV!CTA_CTA|10YCS-SERBIATSOV_CTA_CTA|10YMK-MEPSO----8",
            "CTY|10YCS-SERBIATSOV!CTA_CTA|10YCS-SERBIATSOV_CTA_CTA|10YRO-TEL------P",
        ],
        "RU": [
            "CTY|RU!CTA_CTA|10Y1001A1001A49F_CTA_CTA|10Y1001A1001A39I",
            "CTY|RU!CTA_CTA|10Y1001A1001A49F_CTA_CTA|10YFI-1--------U",
            "CTY|RU!CTA_CTA|10Y1001A1001A49F_CTA_CTA|10YLV-1001A00074",
            "CTY|RU!CTA_CTA|10Y1001A1001A49F_CTA_CTA|10Y1001C--000182",
            "CTY|RU!CTA_CTA|10Y1001A1001A50U_CTA_CTA|10YLT-1001A0008Q",
        ],
        "SE": [
            "CTY|10YSE-1--------K!CTA_CTA|10YSE-1--------K_CTA_CTA|10YDE-EON------1",
            "CTY|10YSE-1--------K!CTA_CTA|10YSE-1--------K_CTA_CTA|10Y1001A1001A796",
            "CTY|10YSE-1--------K!CTA_CTA|10YSE-1--------K_CTA_CTA|10YFI-1--------U",
            "CTY|10YSE-1--------K!CTA_CTA|10YSE-1--------K_CTA_CTA|10YLT-1001A0008Q",
            "CTY|10YSE-1--------K!CTA_CTA|10YSE-1--------K_CTA_CTA|10YNO-0--------C",
            "CTY|10YSE-1--------K!CTA_CTA|10YSE-1--------K_CTA_CTA|10YPL-AREA-----S",
        ],
        "SI": [
            "CTY|10YSI-ELES-----O!CTA_CTA|10YSI-ELES-----O_CTA_CTA|10YAT-APG------L",
            "CTY|10YSI-ELES-----O!CTA_CTA|10YSI-ELES-----O_CTA_CTA|10YHR-HEP------M",
            "CTY|10YSI-ELES-----O!CTA_CTA|10YSI-ELES-----O_CTA_CTA|10YIT-GRTN-----B",
        ],
        "SK": [
            "CTY|10YSK-SEPS-----K!CTA_CTA|10YSK-SEPS-----K_CTA_CTA|10YCZ-CEPS-----N",
            "CTY|10YSK-SEPS-----K!CTA_CTA|10YSK-SEPS-----K_CTA_CTA|10YHU-MAVIR----U",
            "CTY|10YSK-SEPS-----K!CTA_CTA|10YSK-SEPS-----K_CTA_CTA|10YPL-AREA-----S",
            "CTY|10YSK-SEPS-----K!CTA_CTA|10YSK-SEPS-----K_CTA_CTA|10YUA-WEPS-----0",
        ],
        "TR": [
            "CTY|10YTR-TEIAS----W!CTA_CTA|10YTR-TEIAS----W_CTA_CTA|10YCA-BULGARIA-R",
            "CTY|10YTR-TEIAS----W!CTA_CTA|10YTR-TEIAS----W_CTA_CTA|10YGR-HTSO-----Y",
        ],
        "UA": [
            "CTY|10Y1001C--00003F!CTA_CTA|10YUA-WEPS-----0_CTA_CTA|10YHU-MAVIR----U",
            "CTY|10Y1001C--00003F!CTA_CTA|10YUA-WEPS-----0_CTA_CTA|10YRO-TEL------P",
            "CTY|10Y1001C--00003F!CTA_CTA|10YUA-WEPS-----0_CTA_CTA|10YSK-SEPS-----K",
            "CTY|10Y1001C--00003F!CTA_CTA|10Y1001A1001A869_CTA_CTA|10YPL-AREA-----S",
            "CTY|10Y1001C--00003F!CTA_CTA|10Y1001C--000182_CTA_CTA|10Y1001A1001A51S",
            "CTY|10Y1001C--00003F!CTA_CTA|10Y1001C--000182_CTA_CTA|10Y1001A1001A990",
            "CTY|10Y1001C--00003F!CTA_CTA|10Y1001C--000182_CTA_CTA|10Y1001A1001A49F",
        ],
        "UK": [
            "CTY|GB!CTA_CTA|10YGB----------A_CTA_CTA|10YBE----------2",
            "CTY|GB!CTA_CTA|10Y1001A1001A016_CTA_CTA|10YIE-1001A00010",
            "CTY|GB!CTA_CTA|10Y1001A1001A016_CTA_CTA|10YGB----------A",
            "CTY|GB!CTA_CTA|10YGB----------A_CTA_CTA|10YFR-RTE------C",
            "CTY|GB!CTA_CTA|10YGB----------A_CTA_CTA|10YIE-1001A00010",
            "CTY|GB!CTA_CTA|10YGB----------A_CTA_CTA|10YNL----------L",
        ],
    }

    __bzn_borders = {
        "AL": [
            "CTY|10YAL-KESH-----5!BZN_BZN|10YAL-KESH-----5_BZN_BZN|10YGR-HTSO-----Y",
            "CTY|10YAL-KESH-----5!BZN_BZN|10YAL-KESH-----5_BZN_BZN|10YCS-CG-TSO---S",
            "CTY|10YAL-KESH-----5!BZN_BZN|10YAL-KESH-----5_BZN_BZN|10YCS-SERBIATSOV",
        ],
        "AT": [
            "CTY|10YAT-APG------L!BZN_BZN|10YAT-APG------L_BZN_BZN|10YCH-SWISSGRIDZ",
            "CTY|10YAT-APG------L!BZN_BZN|10YAT-APG------L_BZN_BZN|10YCZ-CEPS-----N",
            "CTY|10YAT-APG------L!BZN_BZN|10YAT-APG------L_BZN_BZN|10Y1001A1001A82H",
            "CTY|10YAT-APG------L!BZN_BZN|10YAT-APG------L_BZN_BZN|10YHU-MAVIR----U",
            "CTY|10YAT-APG------L!BZN_BZN|10YAT-APG------L_BZN_BZN|10Y1001A1001A73I",
            "CTY|10YAT-APG------L!BZN_BZN|10YAT-APG------L_BZN_BZN|10YSI-ELES-----O",
            "CTY|10YAT-APG------L!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YBE----------2",
            "CTY|10YAT-APG------L!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YCH-SWISSGRIDZ",
            "CTY|10YAT-APG------L!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YCZ-CEPS-----N",
            "CTY|10YAT-APG------L!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YDK-1--------W",
            "CTY|10YAT-APG------L!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YDK-2--------M",
            "CTY|10YAT-APG------L!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YFR-RTE------C",
            "CTY|10YAT-APG------L!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YHU-MAVIR----U",
            "CTY|10YAT-APG------L!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10Y1001A1001A73I",
            "CTY|10YAT-APG------L!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10Y1001A1001A80L",
            "CTY|10YAT-APG------L!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YNL----------L",
            "CTY|10YAT-APG------L!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YPL-AREA-----S",
            "CTY|10YAT-APG------L!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10Y1001A1001A47J",
            "CTY|10YAT-APG------L!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YSI-ELES-----O",
        ],
        "BA": [
            "CTY|10YBA-JPCC-----D!BZN_BZN|10YBA-JPCC-----D_BZN_BZN|10YHR-HEP------M",
            "CTY|10YBA-JPCC-----D!BZN_BZN|10YBA-JPCC-----D_BZN_BZN|10YCS-CG-TSO---S",
            "CTY|10YBA-JPCC-----D!BZN_BZN|10YBA-JPCC-----D_BZN_BZN|10YCS-SERBIATSOV",
        ],
        "BE": [
            "CTY|10YBE----------2!BZN_BZN|10YBE----------2_BZN_BZN|10Y1001A1001A63L",
            "CTY|10YBE----------2!BZN_BZN|10YBE----------2_BZN_BZN|10Y1001A1001A82H",
            "CTY|10YBE----------2!BZN_BZN|10YBE----------2_BZN_BZN|10YFR-RTE------C",
            "CTY|10YBE----------2!BZN_BZN|10YBE----------2_BZN_BZN|10YGB----------A",
            "CTY|10YBE----------2!BZN_BZN|10YBE----------2_BZN_BZN|10YNL----------L",
        ],
        "BG": [
            "CTY|10YCA-BULGARIA-R!BZN_BZN|10YCA-BULGARIA-R_BZN_BZN|10YGR-HTSO-----Y",
            "CTY|10YCA-BULGARIA-R!BZN_BZN|10YCA-BULGARIA-R_BZN_BZN|10YMK-MEPSO----8",
            "CTY|10YCA-BULGARIA-R!BZN_BZN|10YCA-BULGARIA-R_BZN_BZN|10YRO-TEL------P",
            "CTY|10YCA-BULGARIA-R!BZN_BZN|10YCA-BULGARIA-R_BZN_BZN|10YCS-SERBIATSOV",
            "CTY|10YCA-BULGARIA-R!BZN_BZN|10YCA-BULGARIA-R_BZN_BZN|10YTR-TEIAS----W",
        ],
        "BY": [
            "CTY|BY!BZN_BZN|10Y1001A1001A51S_BZN_BZN|10YLT-1001A0008Q",
            "CTY|BY!BZN_BZN|10Y1001A1001A51S_BZN_BZN|10Y1001C--00003F",
        ],
        "CH": [
            "CTY|10YCH-SWISSGRIDZ!BZN_BZN|10YCH-SWISSGRIDZ_BZN_BZN|10YAT-APG------L",
            "CTY|10YCH-SWISSGRIDZ!BZN_BZN|10YCH-SWISSGRIDZ_BZN_BZN|10Y1001A1001A63L",
            "CTY|10YCH-SWISSGRIDZ!BZN_BZN|10YCH-SWISSGRIDZ_BZN_BZN|10Y1001A1001A82H",
            "CTY|10YCH-SWISSGRIDZ!BZN_BZN|10YCH-SWISSGRIDZ_BZN_BZN|10YFR-RTE------C",
            "CTY|10YCH-SWISSGRIDZ!BZN_BZN|10YCH-SWISSGRIDZ_BZN_BZN|10Y1001A1001A73I",
            "CTY|10YCH-SWISSGRIDZ!BZN_BZN|10YCH-SWISSGRIDZ_BZN_BZN|10Y1001A1001A68B",
        ],
        "CZ": [
            "CTY|10YCZ-CEPS-----N!BZN_BZN|10YCZ-CEPS-----N_BZN_BZN|10YAT-APG------L",
            "CTY|10YCZ-CEPS-----N!BZN_BZN|10YCZ-CEPS-----N_BZN_BZN|10Y1001A1001A63L",
            "CTY|10YCZ-CEPS-----N!BZN_BZN|10YCZ-CEPS-----N_BZN_BZN|10Y1001A1001A82H",
            "CTY|10YCZ-CEPS-----N!BZN_BZN|10YCZ-CEPS-----N_BZN_BZN|10YPL-AREA-----S",
            "CTY|10YCZ-CEPS-----N!BZN_BZN|10YCZ-CEPS-----N_BZN_BZN|10YSK-SEPS-----K",
            "CTY|10YCZ-CEPS-----N!BZN_BZN|10YDOM-CZ-DE-SKK_BZN_BZN|10YPL-AREA-----S",
        ],
        "DE": [
            "CTY|10Y1001A1001A83F!BZN_BZN|10YDOM-CZ-DE-SKK_BZN_BZN|10YPL-AREA-----S",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YBE----------2",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YCH-SWISSGRIDZ",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YCZ-CEPS-----N",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YDK-1--------W",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YDK-2--------M",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YFR-RTE------C",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YHU-MAVIR----U",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10Y1001A1001A73I",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10Y1001A1001A80L",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YNL----------L",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YPL-AREA-----S",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10Y1001A1001A47J",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YSI-ELES-----O",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YAT-APG------L",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YBE----------2",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YCH-SWISSGRIDZ",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YCZ-CEPS-----N",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YDK-1--------W",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YDK-2--------M",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YFR-RTE------C",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YNL----------L",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YPL-AREA-----S",
            "CTY|10Y1001A1001A83F!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10Y1001A1001A47J",
        ],
        "DK": [
            "CTY|10Y1001A1001A65H!BZN_BZN|10YDK-1--------W_BZN_BZN|10Y1001A1001A63L",
            "CTY|10Y1001A1001A65H!BZN_BZN|10YDK-1--------W_BZN_BZN|10Y1001A1001A82H",
            "CTY|10Y1001A1001A65H!BZN_BZN|10YDK-1--------W_BZN_BZN|10YDK-2--------M",
            "CTY|10Y1001A1001A65H!BZN_BZN|10YDK-1--------W_BZN_BZN|10YNO-2--------T",
            "CTY|10Y1001A1001A65H!BZN_BZN|10YDK-1--------W_BZN_BZN|10Y1001A1001A46L",
            "CTY|10Y1001A1001A65H!BZN_BZN|10YDK-2--------M_BZN_BZN|10Y1001A1001A63L",
            "CTY|10Y1001A1001A65H!BZN_BZN|10YDK-2--------M_BZN_BZN|10Y1001A1001A82H",
            "CTY|10Y1001A1001A65H!BZN_BZN|10YDK-2--------M_BZN_BZN|10Y1001A1001A47J",
        ],
        "EE": [
            "CTY|10Y1001A1001A39I!BZN_BZN|10Y1001A1001A39I_BZN_BZN|10YFI-1--------U",
            "CTY|10Y1001A1001A39I!BZN_BZN|10Y1001A1001A39I_BZN_BZN|10YLV-1001A00074",
            "CTY|10Y1001A1001A39I!BZN_BZN|10Y1001A1001A39I_BZN_BZN|10Y1001A1001A49F",
        ],
        "ES": [
            "CTY|10YES-REE------0!BZN_BZN|10YES-REE------0_BZN_BZN|10YFR-RTE------C",
            "CTY|10YES-REE------0!BZN_BZN|10YES-REE------0_BZN_BZN|10YPT-REN------W",
        ],
        "FI": [
            "CTY|10YFI-1--------U!BZN_BZN|10YFI-1--------U_BZN_BZN|10Y1001A1001A39I",
            "CTY|10YFI-1--------U!BZN_BZN|10YFI-1--------U_BZN_BZN|10YNO-4--------9",
            "CTY|10YFI-1--------U!BZN_BZN|10YFI-1--------U_BZN_BZN|10Y1001A1001A49F",
            "CTY|10YFI-1--------U!BZN_BZN|10YFI-1--------U_BZN_BZN|10Y1001A1001A44P",
            "CTY|10YFI-1--------U!BZN_BZN|10YFI-1--------U_BZN_BZN|10Y1001A1001A46L",
        ],
        "FR": [
            "CTY|10YFR-RTE------C!BZN_BZN|10YFR-RTE------C_BZN_BZN|10YBE----------2",
            "CTY|10YFR-RTE------C!BZN_BZN|10YFR-RTE------C_BZN_BZN|10YCH-SWISSGRIDZ",
            "CTY|10YFR-RTE------C!BZN_BZN|10YFR-RTE------C_BZN_BZN|10Y1001A1001A63L",
            "CTY|10YFR-RTE------C!BZN_BZN|10YFR-RTE------C_BZN_BZN|10Y1001A1001A82H",
            "CTY|10YFR-RTE------C!BZN_BZN|10YFR-RTE------C_BZN_BZN|10YES-REE------0",
            "CTY|10YFR-RTE------C!BZN_BZN|10YFR-RTE------C_BZN_BZN|10YGB----------A",
            "CTY|10YFR-RTE------C!BZN_BZN|10YFR-RTE------C_BZN_BZN|10Y1001A1001A73I",
            "CTY|10YFR-RTE------C!BZN_BZN|10YFR-RTE------C_BZN_BZN|10Y1001A1001A81J",
        ],
        "GR": [
            "CTY|10YGR-HTSO-----Y!BZN_BZN|10YGR-HTSO-----Y_BZN_BZN|10YAL-KESH-----5",
            "CTY|10YGR-HTSO-----Y!BZN_BZN|10YGR-HTSO-----Y_BZN_BZN|10YCA-BULGARIA-R",
            "CTY|10YGR-HTSO-----Y!BZN_BZN|10YGR-HTSO-----Y_BZN_BZN|10Y1001A1001A788",
            "CTY|10YGR-HTSO-----Y!BZN_BZN|10YGR-HTSO-----Y_BZN_BZN|10Y1001A1001A699",
            "CTY|10YGR-HTSO-----Y!BZN_BZN|10YGR-HTSO-----Y_BZN_BZN|10Y1001A1001A66F",
            "CTY|10YGR-HTSO-----Y!BZN_BZN|10YGR-HTSO-----Y_BZN_BZN|10YMK-MEPSO----8",
            "CTY|10YGR-HTSO-----Y!BZN_BZN|10YGR-HTSO-----Y_BZN_BZN|10YTR-TEIAS----W",
        ],
        "HR": [
            "CTY|10YHR-HEP------M!BZN_BZN|10YHR-HEP------M_BZN_BZN|10YBA-JPCC-----D",
            "CTY|10YHR-HEP------M!BZN_BZN|10YHR-HEP------M_BZN_BZN|10YHU-MAVIR----U",
            "CTY|10YHR-HEP------M!BZN_BZN|10YHR-HEP------M_BZN_BZN|10YCS-SERBIATSOV",
            "CTY|10YHR-HEP------M!BZN_BZN|10YHR-HEP------M_BZN_BZN|10YSI-ELES-----O",
        ],
        "HU": [
            "CTY|10YHU-MAVIR----U!BZN_BZN|10YHU-MAVIR----U_BZN_BZN|10YAT-APG------L",
            "CTY|10YHU-MAVIR----U!BZN_BZN|10YHU-MAVIR----U_BZN_BZN|10Y1001A1001A63L",
            "CTY|10YHU-MAVIR----U!BZN_BZN|10YHU-MAVIR----U_BZN_BZN|10YHR-HEP------M",
            "CTY|10YHU-MAVIR----U!BZN_BZN|10YHU-MAVIR----U_BZN_BZN|10YRO-TEL------P",
            "CTY|10YHU-MAVIR----U!BZN_BZN|10YHU-MAVIR----U_BZN_BZN|10YCS-SERBIATSOV",
            "CTY|10YHU-MAVIR----U!BZN_BZN|10YHU-MAVIR----U_BZN_BZN|10YSK-SEPS-----K",
            "CTY|10YHU-MAVIR----U!BZN_BZN|10YHU-MAVIR----U_BZN_BZN|10Y1001C--00003F",
            "CTY|10YHU-MAVIR----U!BZN_BZN|10YHU-MAVIR----U_BZN_BZN|10YUA-WEPS-----0",
        ],
        "IE": [
            "CTY|10YIE-1001A00010!BZN_BZN|10Y1001A1001A59C_BZN_BZN|10YGB----------A"
        ],
        "IT": [
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A73I_BZN_BZN|10YCH-SWISSGRIDZ",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A73I_BZN_BZN|10Y1001A1001A63L",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A73I_BZN_BZN|10YFR-RTE------C",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A73I_BZN_BZN|10YSI-ELES-----O",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A788_BZN_BZN|10YGR-HTSO-----Y",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A699_BZN_BZN|10YGR-HTSO-----Y",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A699_BZN_BZN|10Y1001A1001A788",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A70O_BZN_BZN|10Y1001A1001A71M",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A70O_BZN_BZN|10Y1001A1001A73I",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A70O_BZN_BZN|10Y1001A1001A893",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A71M_BZN_BZN|10Y1001A1001A74G",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A71M_BZN_BZN|10Y1001A1001A788",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A72K_BZN_BZN|10Y1001A1001A788",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A66F_BZN_BZN|10YGR-HTSO-----Y",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A877_BZN_BZN|10Y1001A1001A93C",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A73I_BZN_BZN|10YAT-APG------L",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A80L_BZN_BZN|10Y1001A1001A63L",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A68B_BZN_BZN|10YCH-SWISSGRIDZ",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A81J_BZN_BZN|10YFR-RTE------C",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A67D_BZN_BZN|10YSI-ELES-----O",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A76C_BZN_BZN|10Y1001A1001A75E",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A77A_BZN_BZN|10Y1001A1001A75E",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A77A_BZN_BZN|10Y1001A1001A788",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A885_BZN_BZN|10Y1001A1001A74G",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A893_BZN_BZN|10Y1001A1001A74G",
            "CTY|10YIT-GRTN-----B!BZN_BZN|10Y1001A1001A75E_BZN_BZN|10Y1001A1001A93C",
        ],
        "LT": [
            "CTY|10YLT-1001A0008Q!BZN_BZN|10YLT-1001A0008Q_BZN_BZN|10Y1001A1001A51S",
            "CTY|10YLT-1001A0008Q!BZN_BZN|10YLT-1001A0008Q_BZN_BZN|10YLV-1001A00074",
            "CTY|10YLT-1001A0008Q!BZN_BZN|10YLT-1001A0008Q_BZN_BZN|10YPL-AREA-----S",
            "CTY|10YLT-1001A0008Q!BZN_BZN|10YLT-1001A0008Q_BZN_BZN|10Y1001A1001A50U",
            "CTY|10YLT-1001A0008Q!BZN_BZN|10YLT-1001A0008Q_BZN_BZN|10Y1001A1001A47J",
        ],
        "LU": [
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YBE----------2",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YCH-SWISSGRIDZ",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YCZ-CEPS-----N",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YDK-1--------W",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YDK-2--------M",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YFR-RTE------C",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YHU-MAVIR----U",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10Y1001A1001A73I",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10Y1001A1001A80L",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YNL----------L",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YPL-AREA-----S",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10Y1001A1001A47J",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A63L_BZN_BZN|10YSI-ELES-----O",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YAT-APG------L",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YBE----------2",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YCH-SWISSGRIDZ",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YCZ-CEPS-----N",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YDK-1--------W",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YDK-2--------M",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YFR-RTE------C",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YNL----------L",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10YPL-AREA-----S",
            "CTY|10YLU-CEGEDEL-NQ!BZN_BZN|10Y1001A1001A82H_BZN_BZN|10Y1001A1001A47J",
        ],
        "LV": [
            "CTY|10YLV-1001A00074!BZN_BZN|10YLV-1001A00074_BZN_BZN|10Y1001A1001A39I",
            "CTY|10YLV-1001A00074!BZN_BZN|10YLV-1001A00074_BZN_BZN|10YLT-1001A0008Q",
            "CTY|10YLV-1001A00074!BZN_BZN|10YLV-1001A00074_BZN_BZN|10Y1001A1001A49F",
        ],
        "MD": [
            "CTY|10Y1001A1001A990!BZN_BZN|10Y1001A1001A990_BZN_BZN|10YRO-TEL------P",
            "CTY|10Y1001A1001A990!BZN_BZN|10Y1001A1001A990_BZN_BZN|10Y1001C--00003F",
        ],
        "ME": [
            "CTY|10YCS-CG-TSO---S!BZN_BZN|10YCS-CG-TSO---S_BZN_BZN|10YAL-KESH-----5",
            "CTY|10YCS-CG-TSO---S!BZN_BZN|10YCS-CG-TSO---S_BZN_BZN|10YBA-JPCC-----D",
            "CTY|10YCS-CG-TSO---S!BZN_BZN|10YCS-CG-TSO---S_BZN_BZN|10YCS-SERBIATSOV",
        ],
        "MK": [
            "CTY|10YMK-MEPSO----8!BZN_BZN|10YMK-MEPSO----8_BZN_BZN|10YCA-BULGARIA-R",
            "CTY|10YMK-MEPSO----8!BZN_BZN|10YMK-MEPSO----8_BZN_BZN|10YGR-HTSO-----Y",
            "CTY|10YMK-MEPSO----8!BZN_BZN|10YMK-MEPSO----8_BZN_BZN|10YCS-SERBIATSOV",
        ],
        "MT": [
            "CTY|10Y1001A1001A93C!BZN_BZN|10Y1001A1001A93C_BZN_BZN|10Y1001A1001A877",
            "CTY|10Y1001A1001A93C!BZN_BZN|10Y1001A1001A93C_BZN_BZN|10Y1001A1001A75E",
        ],
        "NL": [
            "CTY|10YNL----------L!BZN_BZN|10YNL----------L_BZN_BZN|10YBE----------2",
            "CTY|10YNL----------L!BZN_BZN|10YNL----------L_BZN_BZN|10Y1001A1001A63L",
            "CTY|10YNL----------L!BZN_BZN|10YNL----------L_BZN_BZN|10Y1001A1001A82H",
            "CTY|10YNL----------L!BZN_BZN|10YNL----------L_BZN_BZN|10YGB----------A",
            "CTY|10YNL----------L!BZN_BZN|10YNL----------L_BZN_BZN|10YNO-2--------T",
        ],
        "NO": [
            "CTY|10YNO-0--------C!BZN_BZN|10YNO-1--------2_BZN_BZN|10YNO-2--------T",
            "CTY|10YNO-0--------C!BZN_BZN|10YNO-1--------2_BZN_BZN|10YNO-3--------J",
            "CTY|10YNO-0--------C!BZN_BZN|10YNO-1--------2_BZN_BZN|10Y1001A1001A48H",
            "CTY|10YNO-0--------C!BZN_BZN|10YNO-1--------2_BZN_BZN|10Y1001A1001A46L",
            "CTY|10YNO-0--------C!BZN_BZN|10YNO-2--------T_BZN_BZN|10YDK-1--------W",
            "CTY|10YNO-0--------C!BZN_BZN|10YNO-2--------T_BZN_BZN|10YNL----------L",
            "CTY|10YNO-0--------C!BZN_BZN|10YNO-2--------T_BZN_BZN|10Y1001A1001A48H",
            "CTY|10YNO-0--------C!BZN_BZN|10YNO-3--------J_BZN_BZN|10YNO-4--------9",
            "CTY|10YNO-0--------C!BZN_BZN|10YNO-3--------J_BZN_BZN|10Y1001A1001A48H",
            "CTY|10YNO-0--------C!BZN_BZN|10YNO-3--------J_BZN_BZN|10Y1001A1001A45N",
            "CTY|10YNO-0--------C!BZN_BZN|10YNO-4--------9_BZN_BZN|10YFI-1--------U",
            "CTY|10YNO-0--------C!BZN_BZN|10YNO-4--------9_BZN_BZN|10Y1001A1001A44P",
            "CTY|10YNO-0--------C!BZN_BZN|10YNO-4--------9_BZN_BZN|10Y1001A1001A45N",
        ],
        "PL": [
            "CTY|10YPL-AREA-----S!BZN_BZN|10YPL-AREA-----S_BZN_BZN|10YCZ-CEPS-----N",
            "CTY|10YPL-AREA-----S!BZN_BZN|10YPL-AREA-----S_BZN_BZN|10YDOM-CZ-DE-SKK",
            "CTY|10YPL-AREA-----S!BZN_BZN|10YPL-AREA-----S_BZN_BZN|10Y1001A1001A63L",
            "CTY|10YPL-AREA-----S!BZN_BZN|10YPL-AREA-----S_BZN_BZN|10Y1001A1001A82H",
            "CTY|10YPL-AREA-----S!BZN_BZN|10YPL-AREA-----S_BZN_BZN|10YLT-1001A0008Q",
            "CTY|10YPL-AREA-----S!BZN_BZN|10YPL-AREA-----S_BZN_BZN|10Y1001A1001A47J",
            "CTY|10YPL-AREA-----S!BZN_BZN|10YPL-AREA-----S_BZN_BZN|10YSK-SEPS-----K",
            "CTY|10YPL-AREA-----S!BZN_BZN|10YPL-AREA-----S_BZN_BZN|10Y1001C--00003F",
            "CTY|10YPL-AREA-----S!BZN_BZN|10YPL-AREA-----S_BZN_BZN|10Y1001A1001A869",
        ],
        "PT": [
            "CTY|10YPT-REN------W!BZN_BZN|10YPT-REN------W_BZN_BZN|10YES-REE------0"
        ],
        "RO": [
            "CTY|10YRO-TEL------P!BZN_BZN|10YRO-TEL------P_BZN_BZN|10YCA-BULGARIA-R",
            "CTY|10YRO-TEL------P!BZN_BZN|10YRO-TEL------P_BZN_BZN|10YHU-MAVIR----U",
            "CTY|10YRO-TEL------P!BZN_BZN|10YRO-TEL------P_BZN_BZN|10Y1001A1001A990",
            "CTY|10YRO-TEL------P!BZN_BZN|10YRO-TEL------P_BZN_BZN|10YCS-SERBIATSOV",
            "CTY|10YRO-TEL------P!BZN_BZN|10YRO-TEL------P_BZN_BZN|10Y1001C--00003F",
            "CTY|10YRO-TEL------P!BZN_BZN|10YRO-TEL------P_BZN_BZN|10YUA-WEPS-----0",
        ],
        "RS": [
            "CTY|10YCS-SERBIATSOV!BZN_BZN|10YCS-SERBIATSOV_BZN_BZN|10YAL-KESH-----5",
            "CTY|10YCS-SERBIATSOV!BZN_BZN|10YCS-SERBIATSOV_BZN_BZN|10YBA-JPCC-----D",
            "CTY|10YCS-SERBIATSOV!BZN_BZN|10YCS-SERBIATSOV_BZN_BZN|10YCA-BULGARIA-R",
            "CTY|10YCS-SERBIATSOV!BZN_BZN|10YCS-SERBIATSOV_BZN_BZN|10YHR-HEP------M",
            "CTY|10YCS-SERBIATSOV!BZN_BZN|10YCS-SERBIATSOV_BZN_BZN|10YHU-MAVIR----U",
            "CTY|10YCS-SERBIATSOV!BZN_BZN|10YCS-SERBIATSOV_BZN_BZN|10YCS-CG-TSO---S",
            "CTY|10YCS-SERBIATSOV!BZN_BZN|10YCS-SERBIATSOV_BZN_BZN|10YMK-MEPSO----8",
            "CTY|10YCS-SERBIATSOV!BZN_BZN|10YCS-SERBIATSOV_BZN_BZN|10YRO-TEL------P",
        ],
        "RU": [
            "CTY|RU!BZN_BZN|10Y1001A1001A49F_BZN_BZN|10Y1001A1001A39I",
            "CTY|RU!BZN_BZN|10Y1001A1001A49F_BZN_BZN|10YFI-1--------U",
            "CTY|RU!BZN_BZN|10Y1001A1001A49F_BZN_BZN|10YLV-1001A00074",
            "CTY|RU!BZN_BZN|10Y1001A1001A49F_BZN_BZN|10Y1001C--00003F",
            "CTY|RU!BZN_BZN|10Y1001A1001A50U_BZN_BZN|10YLT-1001A0008Q",
        ],
        "SE": [
            "CTY|10YSE-1--------K!BZN_BZN|10Y1001A1001A44P_BZN_BZN|10YFI-1--------U",
            "CTY|10YSE-1--------K!BZN_BZN|10Y1001A1001A44P_BZN_BZN|10YNO-4--------9",
            "CTY|10YSE-1--------K!BZN_BZN|10Y1001A1001A44P_BZN_BZN|10Y1001A1001A45N",
            "CTY|10YSE-1--------K!BZN_BZN|10Y1001A1001A45N_BZN_BZN|10YNO-3--------J",
            "CTY|10YSE-1--------K!BZN_BZN|10Y1001A1001A45N_BZN_BZN|10YNO-4--------9",
            "CTY|10YSE-1--------K!BZN_BZN|10Y1001A1001A45N_BZN_BZN|10Y1001A1001A46L",
            "CTY|10YSE-1--------K!BZN_BZN|10Y1001A1001A46L_BZN_BZN|10YDK-1--------W",
            "CTY|10YSE-1--------K!BZN_BZN|10Y1001A1001A46L_BZN_BZN|10YFI-1--------U",
            "CTY|10YSE-1--------K!BZN_BZN|10Y1001A1001A46L_BZN_BZN|10YNO-1--------2",
            "CTY|10YSE-1--------K!BZN_BZN|10Y1001A1001A46L_BZN_BZN|10Y1001A1001A47J",
            "CTY|10YSE-1--------K!BZN_BZN|10Y1001A1001A47J_BZN_BZN|10Y1001A1001A63L",
            "CTY|10YSE-1--------K!BZN_BZN|10Y1001A1001A47J_BZN_BZN|10Y1001A1001A82H",
            "CTY|10YSE-1--------K!BZN_BZN|10Y1001A1001A47J_BZN_BZN|10YDK-2--------M",
            "CTY|10YSE-1--------K!BZN_BZN|10Y1001A1001A47J_BZN_BZN|10YLT-1001A0008Q",
            "CTY|10YSE-1--------K!BZN_BZN|10Y1001A1001A47J_BZN_BZN|10YPL-AREA-----S",
        ],
        "SI": [
            "CTY|10YSI-ELES-----O!BZN_BZN|10YSI-ELES-----O_BZN_BZN|10YAT-APG------L",
            "CTY|10YSI-ELES-----O!BZN_BZN|10YSI-ELES-----O_BZN_BZN|10Y1001A1001A63L",
            "CTY|10YSI-ELES-----O!BZN_BZN|10YSI-ELES-----O_BZN_BZN|10YHR-HEP------M",
            "CTY|10YSI-ELES-----O!BZN_BZN|10YSI-ELES-----O_BZN_BZN|10Y1001A1001A73I",
            "CTY|10YSI-ELES-----O!BZN_BZN|10YSI-ELES-----O_BZN_BZN|10Y1001A1001A67D",
        ],
        "SK": [
            "CTY|10YSK-SEPS-----K!BZN_BZN|10YDOM-CZ-DE-SKK_BZN_BZN|10YPL-AREA-----S",
            "CTY|10YSK-SEPS-----K!BZN_BZN|10YSK-SEPS-----K_BZN_BZN|10YCZ-CEPS-----N",
            "CTY|10YSK-SEPS-----K!BZN_BZN|10YSK-SEPS-----K_BZN_BZN|10YHU-MAVIR----U",
            "CTY|10YSK-SEPS-----K!BZN_BZN|10YSK-SEPS-----K_BZN_BZN|10YPL-AREA-----S",
            "CTY|10YSK-SEPS-----K!BZN_BZN|10YSK-SEPS-----K_BZN_BZN|10Y1001C--00003F",
            "CTY|10YSK-SEPS-----K!BZN_BZN|10YSK-SEPS-----K_BZN_BZN|10YUA-WEPS-----0",
        ],
        "TR": [
            "CTY|10YTR-TEIAS----W!BZN_BZN|10YTR-TEIAS----W_BZN_BZN|10YCA-BULGARIA-R",
            "CTY|10YTR-TEIAS----W!BZN_BZN|10YTR-TEIAS----W_BZN_BZN|10YGR-HTSO-----Y",
        ],
        "UA": [
            "CTY|10Y1001C--00003F!BZN_BZN|10Y1001C--00003F_BZN_BZN|10Y1001A1001A51S",
            "CTY|10Y1001C--00003F!BZN_BZN|10Y1001C--00003F_BZN_BZN|10YHU-MAVIR----U",
            "CTY|10Y1001C--00003F!BZN_BZN|10Y1001C--00003F_BZN_BZN|10Y1001A1001A990",
            "CTY|10Y1001C--00003F!BZN_BZN|10Y1001C--00003F_BZN_BZN|10YPL-AREA-----S",
            "CTY|10Y1001C--00003F!BZN_BZN|10Y1001C--00003F_BZN_BZN|10YRO-TEL------P",
            "CTY|10Y1001C--00003F!BZN_BZN|10Y1001C--00003F_BZN_BZN|10Y1001A1001A49F",
            "CTY|10Y1001C--00003F!BZN_BZN|10Y1001C--00003F_BZN_BZN|10YSK-SEPS-----K",
            "CTY|10Y1001C--00003F!BZN_BZN|10YUA-WEPS-----0_BZN_BZN|10YHU-MAVIR----U",
            "CTY|10Y1001C--00003F!BZN_BZN|10YUA-WEPS-----0_BZN_BZN|10YRO-TEL------P",
            "CTY|10Y1001C--00003F!BZN_BZN|10YUA-WEPS-----0_BZN_BZN|10YSK-SEPS-----K",
            "CTY|10Y1001C--00003F!BZN_BZN|10Y1001A1001A869_BZN_BZN|10YPL-AREA-----S",
        ],
        "UK": [
            "CTY|GB!BZN_BZN|10YGB----------A_BZN_BZN|10YBE----------2",
            "CTY|GB!BZN_BZN|10YGB----------A_BZN_BZN|10YFR-RTE------C",
            "CTY|GB!BZN_BZN|10YGB----------A_BZN_BZN|10Y1001A1001A59C",
            "CTY|GB!BZN_BZN|10YGB----------A_BZN_BZN|10YNL----------L",
        ],
    }

    __pagination = [10, 25, 50, 100]

    def __init__(
        self,
        items_per_page=100,
        connection=5,
        backoff_factor=0.5,
        conn_rst_int=900,
    ):
        self.connection = connection
        self.backoff_factor = backoff_factor
        self.conn_rst_int = conn_rst_int
        if items_per_page not in self.__pagination:
            raise ValueError("item_per_page domain is (10, 25, 50, 100)")
        self.items_per_page = items_per_page
        self.requests_num = 0
        self.session = requests.Session()
        retry = Retry(connect=connection, backoff_factor=backoff_factor)
        adapter = HTTPAdapter(max_retries=retry)
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)
        self.s_time = timer()

    def __restart_session(self):
        self.session.close()
        self.session = requests.Session()
        retry = Retry(
            connect=self.connection, backoff_factor=self.backoff_factor
        )
        adapter = HTTPAdapter(max_retries=retry)
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)

    def __post(self, url, params, data):
        """
        Low Level API call
        """
        self.__post_headers.update({"User-Agent": random.choice(user_agents)})
        try:
            response = self.session.post(
                url,
                params=params,
                data=data,
                headers=self.__post_headers,
                timeout=(5, 25),
            )
            response.raise_for_status()
        except requests.ConnectionError as error:
            logging.exception(error, exc_info=True)
            raise error from None
        except requests.HTTPError as error:
            try:
                error_data = json.loads(response.text)
            except ValueError:
                logging.error(error)
                raise error from None
            else:
                if "errors" in error_data:
                    logging.error(
                        "post api call bad params "
                        + error_data["errors"][0]["message"]
                    )
                    raise EntsoeApiBadParams(
                        error_data["errors"][0]["message"]
                    ) from None
        else:
            return json.loads(response.text)

    def __get(self, url, params):
        """
        Low Level API call
        """
        self.__get_headers.update({"User-Agent": random.choice(user_agents)})
        try:
            response = self.session.get(
                url, params=params, headers=self.__get_headers, timeout=(5, 25)
            )
            response.raise_for_status()
        except (requests.HTTPError, requests.ConnectionError) as error:
            logging.exception(error, exc_info=True)
            raise error from None

        else:
            return response.text

    def api_call(self, method, params=(), data=None):
        """
        Implements an api call
        """
        t_now = timer()
        if t_now - self.s_time > self.conn_rst_int:
            self.s_time = t_now
            logging.info("resetting connection to server ")
            self.__restart_session()

        self.requests_num += 1
        if method not in self.__endpoints:
            raise EntsoeApiUnkownMethod

        if "POST" in self.__endpoints[method] and data is None:
            raise EntsoeApiPOSTMethodMissingData

        url = self.__base_url + method

        if self.__endpoints[method] is "POST":
            data = json.dumps(data)
            return self.__post(url, params, data)
        else:
            return self.__get(url, params)

    def close(self):
        """
        Close a requests session
        """
        self.session.close()
        self.session = None

    def transmission_grid_unavailability(
        self,
        *,
        from_date,
        to_date,
        area_type,
        country=None,
        asset_type=None,
        outage_type=None,
        outage_status=None,
    ):
        """
        Implements api method to get unavailability in transmission grid
        """
        if country is None:
            borders = "ALL"
        else:
            if country not in self.__countries:
                raise RuntimeError(f"Country code: {country} is invalid")
            if "BORDER_CTA" in area_type:
                borders = self.__cta_borders[country]
            elif "BORDER_BZN" in area_type:
                borders = self.__bzn_borders[country]
        if asset_type is None:
            asset_type = self.__asset_type
        if outage_type is None:
            outage_type = self.__outage_type
        if outage_status is None:
            outage_status = self.__outage_status

        msg = (
            f"session config \n"
            f"time interval: {from_date} - {to_date}\n"
            f"asset type   : {pprint.pformat(asset_type, indent=4)}\n"
            f"outage type  : {pprint.pformat(outage_type, indent=4)}\n"
            f"outage status: {pprint.pformat(outage_status, indent=4)}\n"
            f"country: {country} area type: {area_type} \n"
            f"borders: \n{pprint.pformat(borders, indent=2, )}\n"
        )

        logging.info(msg)
        table_data = []

        params = (
            ("name", ""),
            ("defaultValue", "false"),
            ("viewType", "TABLE"),
            ("areaType", area_type),
            ("atch", "false"),
            ("dateTime.dateTime", f"{from_date} 00:00|UTC|DAY"),
            ("dateTime.endDateTime", f"{to_date} 00:00|UTC|DAY"),
            ("border.values", borders),
            (
                "assetType.values",
                [
                    self.__asset_type[param]
                    for param in asset_type
                    if param in self.__asset_type
                ],
            ),
            (
                "outageType.values",
                [
                    self.__outage_type[param]
                    for param in outage_type
                    if param in self.__outage_type
                ],
            ),
            (
                "outageStatus.values",
                [
                    self.__outage_status[param]
                    for param in outage_status
                    if param in self.__outage_status
                ],
            ),
        )

        data = {
            "sEcho": 2,  # what is this ?
            "iColumns": 7,
            "sColumns": "status,nature,unavailabilityInterval,"
            "inArea,outArea,newNTC,",
            "iDisplayStart": 0,
            "iDisplayLength": self.items_per_page,
            "amDataProp": [0, 1, 2, 3, 4, 5, 6],
        }

        have = 0  # keep track of  data
        logging.info("start downloading table data\n")
        while True:
            json_data = self.api_call("getDataTableData/", params, data)

            data_frag = self.parse_table_data(json_data)

            have += len(data_frag)
            data.update({"iDisplayStart": have})  # set pagination offset

            # append data
            table_data = table_data + data_frag
            try:
                progress = have / json_data["iTotalRecords"]
            except ZeroDivisionError:
                progress = 0

            prog = round(100 * progress)
            print(f"[1/3] data   {'{:4d}'.format(prog)}%", end="\r")
            logging.info(
                f"progress [{have} / {json_data['iTotalRecords']}] " f"data"
            )

            if have == json_data["iTotalRecords"]:
                print("\n")
                logging.info("data  download completed\n\n")
                break
        return table_data

    @staticmethod
    def parse_table_data(json_data):
        """
        Parses data returned from transmission_grid_unavailability method
        """
        data = [row for row in json_data["aaData"]]

        data = [
            {
                "status": row[0],
                "nature": row[1],
                "unavailabilityInterval": row[2].replace("&nbsp;", " "),
                "inArea": row[3],
                "outArea": row[4],
                "newNTC": BeautifulSoup(row[5], "lxml").text,
                "detailId": row[6],
            }
            for row in data
        ]

        for row in data:
            interval = row.pop("unavailabilityInterval")
            start_date, end_date = EntsoeAPI.parse_unavailability_interval(
                interval
            )

            row.update(
                {
                    "unavailabilityStart": start_date,
                    "unavailabilityEnd": end_date,
                }
            )

        for row in data:
            """
            Decode Outage Status 
            -----------------
                A05: Active
                A09: Cancelled
                A13: Withdrawn
            """
            if "A05" in row["status"]:
                row["status"] = "Active"
            elif "A09" in row["status"]:
                row["status"] = "Cancelled"
            elif "A13" in row["status"]:
                row["status"] = "Withdrawn"

            """
            Decode Outage Type 
            -----------------
                A54: Forced
                A53: Planned
            """
            if "A53" in row["nature"]:
                row["nature"] = "Planned"
            elif "A54" in row["nature"]:
                row["nature"] = "Forced"
        return data

    @staticmethod
    def parse_unavailability_interval(interval, tz_support=False):
        """
        Parses date interval in parse_table_data
        """
        date_string, tz = tuple(interval.rsplit(" ("))
        tz = tz.replace(")", "").strip()

        start_date, end_date = tuple(date_string.split(" - "))

        start_date = start_date.strip()
        end_date = end_date.strip()

        """
        start_date = datetime.datetime.strptime(start_date, "%d.%m.%Y %H:%M")
        end_date = datetime.datetime.strptime(end_date, "%d.%m.%Y %H:%M")

        if tz_support:
            start_date = start_date.replace(tzinfo=pytz.timezone(tz))
            end_date = end_date.replace(tzinfo=pytz.timezone(tz))
        """
        return [start_date, end_date]

    def details_grid_unavailability(self, detail_id):
        """
        Implements api method to get details on unavailability in transmission
        grid
        """
        params = (
            ("detailId", detail_id),
            ("fullDetailId", detail_id),
            ("_", self.__unix_timestamp_mill()),
        )
        html_tables = self.api_call("detail", params=params)
        soup = BeautifulSoup(html_tables, "lxml")

        details_data = []
        tables = soup.find_all("table")
        for t_id, table in enumerate(tables):
            table_rows = table.find_all("tr")

            for r_id, tr in enumerate(table_rows):
                row = []
                td = tr.find_all("td")

                for elem in td:
                    if elem.get("class"):
                        """
                        Decode Asset Types
                        -----------------
                            B21 : AC Link
                            B22 : DC Link
                            B23 : Substation
                            B24 : Transformer
                            UNKNOWN: Not specified
                        """

                        if "B21" in elem.get("class")[0]:
                            row.append("AC Link")
                        elif "B22" in elem.get("class")[0]:
                            row.append("DC Link")
                        elif "B23" in elem.get("class")[0]:
                            row.append("Substation")
                        elif "B23" in elem.get("class")[0]:
                            row.append("Transformer")
                        elif "UNKNOWN" in elem.get("class")[0]:
                            row.append("Not specified")
                    else:
                        row.append(elem.text.strip())

                if row:
                    details_data += row

        # hack remove duplicate failure status in details
        if details_data.count("Failure") == 2:
            details_data.remove("Failure")

        # hack remove duplicate failure status in details
        if details_data.count("Foreseen Maintenance") == 2:
            details_data.remove("Foreseen Maintenance")

        if len(details_data) != 6:
            # hack fill in missing values in Affected Assets when there are
            # No Affected Assets
            # logging.warning("Row id {} has missing data, fill in "
            #                "missing values".format(detail_id))
            for i in range(6 - len(details_data)):
                details_data.append(details_data[-1])

        # add detailId to each detail table for easy indexing
        details_data.append(detail_id)
        return details_data

    @staticmethod
    def parse_data_details(tables_data):
        """
        Parses data returned from details_grid_unavailability method
        """

        if len(tables_data) < 7:
            raise EntsoeApiExcetpion(
                f"invalid  size for details : " f"{tables_data}"
            )

        if len(tables_data) > 7:
            # FIXME fix this shit
            logging.warning("Affected assets two rows")

        return {
            "comments": tables_data[0],
            "reason": tables_data[1],
            "code": tables_data[2],
            "type": tables_data[3],
            "name": tables_data[4],
            "location": tables_data[5],
            "detailId": tables_data[6],
        }

    def curve_grid_unavailability(
        self,
        detail_id,
        offset=0,
        stop_offset=0,
        batch_size=None,
        batch_progress=None,
        delay=1,
    ):
        """
        Implements api method getDetailCurve
        """

        timeseries_data = []
        have = offset

        params = (("detailId", detail_id),)

        data = {
            "sEcho": 1,
            "iColumns": 2,
            "sColumns": "mtu,ntc",
            "iDisplayStart": offset,
            "iDisplayLength": self.items_per_page,
            "amDataProp": [0, 1],
        }

        while True:
            json_curve = self.api_call("getDetailCurve/", params, data)
            curve_frag = json_curve["aaData"]

            have += len(curve_frag)

            timeseries_data = timeseries_data + curve_frag
            data.update({"iDisplayStart": have})

            msg = (
                f"progress [{have} / {json_curve['iTotalRecords']}] "
                f"{detail_id}"
            )
            msg = (
                f"batch [{batch_progress}/{batch_size}] " + msg
                if batch_size
                else msg
            )
            logging.info(msg)

            if have == json_curve["iTotalRecords"]:
                break
            elif have >= stop_offset:
                break
            else:
                time.sleep(delay)

        return timeseries_data

    @staticmethod
    def curve_to_df(data):
        """
        Returns a pandas dataframe from time series data
        """

        column = ["interval start", "interval end", "newNTC"]

        data = [[*row[0].split(" - "), row[1]] for row in data]

        df = pd.DataFrame(data, columns=column)

        return df

    @staticmethod
    def __unix_timestamp_mill():
        return "{:.10f}".format(time.time() * 1000).split(".")[0]

    @staticmethod
    def details_grid_unavailability_batch(api, detail_id_list, delay=1):
        logging.info("start downloading detail data\n")
        total = len(detail_id_list)
        detail_data = []
        for progress, i in enumerate(detail_id_list):
            try:
                detail = api.details_grid_unavailability(i)
                detail = api.parse_data_details(detail)
            except Exception as error:
                logging.error(error)
                raise error from None
            else:
                detail_data.append(detail)
                prog = round(100 * ((progress + 1) / total))
                print(f"[2/3] detail {'{:4d}'.format(prog)}%", end="\r")
                logging.info(f"progress [{progress + 1} / {total}] detail {i}")
                time.sleep(delay)

        logging.info("detail download completed\n\n")
        print("\n")
        return detail_data

    @staticmethod
    def curve_grid_unavailability_batch(
        api, detail_id_list, from_date, to_date, name_format, out_dir, delay=1
    ):
        total = len(detail_id_list)

        logging.info("start downloading time series data\n")
        for progress, i in enumerate(detail_id_list):

            offset, stop_offset = api.pagination_offsets(
                i[1], i[2], from_date, to_date
            )

            try:
                timeseries = api.curve_grid_unavailability(
                    i[0],
                    offset,
                    stop_offset,
                    batch_progress=progress + 1,
                    batch_size=total,
                    delay=delay,
                )
            except Exception as error:
                logging.error(error)
                raise error from None
            else:
                ts_df = api.curve_to_df(timeseries)
                ts_df.to_csv(
                    os.path.join(out_dir, f"{name_format}_{i[0]}.csv"),
                    header=ts_df.columns,
                )
                time.sleep(delay)

            prog = round(100 * ((progress + 1) / total))
            print(f"[3/3] series {'{:4d}'.format(prog)}%", end="\r")
        print("\n")
        logging.info("time series download completed\n\n")

    @staticmethod
    def parse_borders_from_html_code():
        """
        returns  country -  borders dictionary
        """

        borders = {}

        response = requests.get(
            "https://transparency.entsoe.eu/outage-domain/"
            "r2/unavailabilityInTransmissionGrid/show"
        )

        soup = BeautifulSoup(response.text, "lxml")
        divs = soup.find_all("div", class_="dv-sub-filter-hierarchic-wrapper")

        for country, div in zip(EntsoeAPI.__countries, divs):
            inputs = div.find_all("input")
            country_borders = []
            for i in inputs:
                border = i.get("value")
                if "on" in border:  # ignore this string in borders
                    continue
                country_borders.append(border)
            borders.update({country: country_borders})

        return borders

    @staticmethod
    def pagination_offsets(start_date, end_date, from_date, to_date):
        """
        Returns start and stop offset for time series pagination
        """

        start_date = datetime.datetime.strptime(start_date, "%d.%m.%Y %H:%M")
        end_date = datetime.datetime.strptime(end_date, "%d.%m.%Y %H:%M")
        from_date = datetime.datetime.strptime(
            from_date + " 00:00", "%d.%m.%Y %H:%M"
        )
        to_date = datetime.datetime.strptime(
            to_date + " 00:00", "%d.%m.%Y %H:%M"
        )

        max_stop_offset = len(pd.date_range(start_date, end_date, freq="H"))

        off_set_time = from_date - start_date
        off_set = len(
            pd.date_range(start_date, start_date + off_set_time, freq="H")
        )
        td = to_date - from_date
        stop_offset = off_set + 24 * td.days

        """
        logging.info(
            f"\n"
            f"start_date:{start_date} - end_date:{end_date}\n"
            f"from_date: {from_date} - to_date{to_date}\n"
            f"{td} offset: {off_set}, "
            f"stop_offset {stop_offset} max offset: {max_stop_offset}\n\n"
        )

        if stop_offset > max_stop_offset:
            logging.info("WARN:stop_offset greater than max_offset")
        """
        return off_set, stop_offset
